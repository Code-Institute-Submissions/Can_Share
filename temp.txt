# , beer=beer_list    
#_newbeeradd = mongo.db.cansAndBottleInfo.find()
# beer_list = [beer for beer in _newbeeradd]


"""
@app.route('/add_beer')
def add_beer():
    return render_template('addnewbeer.html', typesofbeer=mongo.db.type.find())


@app.route('/insert_beer', methods=['POST'])
def insert_beer():
    cans = mongo.db.cansAndBottleInfo
    cans.insert_one(request.form.to_dict())
    return redirect(url_for('home'))
"""


# UPDATE
@app.route("/edit_beer/<can_id>")
def edit_beer(can_id):
    the_can = mongo.db.cansAndBottleinfo.find_one({'_id': ObjectId(can_id)})
    all_caninfo = mongo.db.cansAndBottleInfo.find()
    return render_template('editbeer.html', cans=the_can, caninfo=all_caninfo)

    , can_id=cans._id

    # UPDATE
@app.route("/edit_beer/<can_id>")
def edit_beer(can_id):
    _the_can = mongo.db.cansAndBottleinfo.find_one({'_id': ObjectId(can_id)})
    all_caninfo = mongo.db.cansAndBottleInfo.find()
    return render_template('editbeer.html', the_can=_the_can, allcaninfo=all_caninfo,
                           typesofbeer=mongo.db.type.find(),
                           abvnumber=arange(0, 20, 0.1))

     
# UPDATE
@app.route("/edit_beer/<can_id>")
def edit_beer(can_id):
    _the_can = mongo.db.cansAndBottleInfo.find_one({'_id': ObjectId(can_id)})
    variety_of_beer = ""# mongo.db.type.find_one()
    print('variety of beer', variety_of_beer)
    return render_template('editbeer.html', the_can=_the_can,
                           typesofbeer=mongo.db.type.find(),
                           abvnumber=arange(0, 200, 1),
                           varietyofbeer=variety_of_beer,
                           price=arange(0, 200, 1))                      


<option class="dropdown-item" value="{{the_can.type}}" name="{{type._id}}" selected>{{type.type}}</option>

java crript



function vote(direction, element) {
    console.log(direction)
    if (direction == 'up') {
        var xhttp = new XMLHttpRequest();// xhttp request url passin 1 and can_id  
        
        xhttp.onreadystatechange = function () {
            if (this.readyState == 4 && this.status == 200) {// results python going to check if the user has already rated it and determin what action to take
                results = this.responseText;
            }
        };
        xhttp.open("GET", '/vote/' + element.id + direction, true);
        xhttp.send();

        // if the results are 1 or 0 change the icon from a filled in one to a non filled in one.   
        if (results == 1) {
            document.getElementById('thumbsiconup').className = 'fas fa-thumbs-up TU';
        }
        else {
            document.getElementById('thumbsiconup').className = 'far fa-thumbs-up TU';
        }
    }
    else {
        var xhttp = new XMLHttpRequest();
        console.log('i click down')
        xhttp.onreadystatechange = function () {
            if (this.readyState == 4 && this.status == 200) {
               results = this.responseText;
            }
        };
        xhttp.open("GET", '/vote/' + element.id + direction, true);
        xhttp.send();
        // if the results are 1 or 0 change the icon from a filled in one to a non filled in one.   
        if ( results == 0) {
            document.getElementById('thumbsicondown').className = 'fas fa-thumbs-up TD';
        }
        else {
            document.getElementById('thumbsicondown').className = 'far fa-thumbs-up TD';
        }
    }
}
// far is not clicked
// fas is clicked


"""
    user = session['email']
    if results.userId != user:
        if len(results) == 0: # 2. len(results) if len results 0 user has not voted
            if request.method == 'POST': # insert(rating canid and userid) if rating is 1 return thumbs up else return thumbs down
                rating = mongo.db.ratings
                rating.insert_one({
                    'userId': session['email'],
                    'canId': element,
                    'rating': 1
                })
            return 1
    if results.userId == session['email']:
        elif len(results) != 0:
            if results[rating] == results[rating]:
                mongo.db.ratings.remove({'_id': ObjectId(_id)})
            return 0

    # else len results is not 0 means user has voted results[rating] if results[rating] == to rating delete results[_id] using def delete return disable both unchecked from java
    # if results[rating] != results update ratings =0 reuturn the name of the icon that needs to be checked

"""


  if request.method == 'POST':
        # GET THE DATA FROM MY FORM (COMING FROM THE CLIENT)
        cans = mongo.db.cansAndBottleInfo
        form = request.form.to_dict()
        form['beer_type'] = ObjectId(form['beer_type'])
        cans.insert_one(form)
        return redirect(url_for('homeLoggedIn'))

        cans.insert_one({
                        'name': request.form['name'],
                        'brand': request.form['brand'],
                        'beer_type': ObjectId(request.form['beer_type']),
                        'abv': request.form['abv'],
                        'vegan': request.form['vegan'],
                        'hop_type': request.form['hop_type'],
                        'malts': request.form['malts'],
                        'average_price': request.form['average_price'],
                        'where_bought': request.form['where_bought'],
                        'image_url': request.form['image_url'],
                        'review': request.form['review'], 
                        'ownerid': owner,
                        })





@app.route('/login', methods=["GET", "POST"])
def login():
    if request.method == "GET":
        return render_template('beerceller.html')
    elif request.method == "POST":
        email = request.form['email']
        user = mongo.db.users.find_one({'email': email})    # if else statment to check if a user is regitsered or not if not redidrect
        user_password = user['password']
        form_password = request.form['password']
        if pbkdf2_sha256.verify(form_password, user_password):
            session['logged-in'] = True
            session['username'] = user['username']
            session['email'] = email
            session['usertype'] = user['type']
        else:
            return render_template(url_for('loginerror.html'))
        return redirect(url_for('homeLoggedIn'))
        # return render_template('beerceller_loggedin.html', user_type=session['username'])         


       	<!-- Object wrappes the image to ensure thst if the image url fails an image in included-->
				<a href="{{url_for ('can_info', can_id=cans._id)}}">
					<object class="canimage" data="{{cans.image_url}}" type="image/jpg">
				<img src="/static/images/noimage.jpg" class="card-img-top canimage" alt="can image"></object></a>

 	<div class="row admin-thumb-box">
							<div class="ratings-thumbs-box">
								<div id="{{cans._id}}">
									<i id="{{cans._id}}up" class="far fa-thumbs-up TU" onclick="vote('up', this)"></i>
									<!-- function vote(up)  maybe change get element by tag name-->
									<Span class="ratings-cards">{{cans.ratings}}</Span>
									<i id="{{cans._id}}down" class="far fa-thumbs-down TD" onclick="vote('down', this)"></i>
								</div>
							</div>
						</div>
					</div>

 
def calculate(can_id):
    # print(can_id)
    findrating = list(mongo.db.ratings.find({'canId': ObjectId(can_id)}))
    print(findrating)
    # print(ObjectId(can_id))
    total = 0
    for res in findrating:
        total += res['rating']
    if len(findrating) == 0:
        return 'no ratings' 
    totalratings = total / len(findrating)
    return totalratings        

    def calculate(can_id):
    # print(can_id)
    findrating = list(mongo.db.ratings.find({'canId': ObjectId(can_id)}))
    print(findrating)
    # print(ObjectId(can_id))
    total = 0
    for res in findrating:
        total += res['rating']
    if len(findrating) == 0:
        return 'no ratings' 
    totalratings = total / len(findrating)
    return totalratings      

    				<div class="card-body card-buttons">
						<a class="btn btn-primary" href="{{url_for ('can_info', can_id=cans._id)}}"
							role="button">Info</a>
						<a class="btn btn-primary" href="{{url_for ('edit_beer', can_id=cans._id)}}"
							role="button">Edit</a>
						<a class="btn btn-primary" data-target="#delete_modal"
							onclick="updatemodal('{{cans.name}}','{{cans._id}}')" data-toggle="modal"
							role="button">Delete</a>
						<div class="admin-thumb-box">
							<div id="{{cans._id}}" class="ratings-thumbs-box">
								<i id="{{cans._id}}up" class="far fa-thumbs-up TU" onclick="vote('up', this)"></i>
								<!-- function vote(up)  maybe change get element by tag name-->
								<Span class="ratings-cards">{{cans.ratings}}</Span>
								<i id="{{cans._id}}down" class="far fa-thumbs-down TD" onclick="vote('down', this)"></i>
							</div>
						</div>
					</div>
			</div>
		</div>

        {% if cans.rating == 1 %}
							<div class="row">
								<div class="col">
									<i id="{{cans._id}}up" class="fas fa-thumbs-up TU" onclick="vote('up', this)"></i>
								</div>
								<div class="col ratings-cards ratings-number">{{cans.average}}</div>
								<div class="col">
									<i id="{{cans._id}}down" class="far fa-thumbs-down TD" onclick="vote('down', this)"></i>
								</div>
							</div>
							{% elif cans.rating == 0 %}
							<i id="{{cans._id}}up" class="far fa-thumbs-up TU" onclick="vote('up', this)"></i>
							<div class="ratings-cards ratings-number">{{cans.average}}</div>
							<i id="{{cans._id}}down" class="fas fa-thumbs-down TD" onclick="vote('down', this)"></i>
							{% else %}
							<i id="{{cans._id}}up" class="far fa-thumbs-up TU" onclick="vote('up', this)"></i>
							<div class="ratings-cards ratings-number">{{cans.average}}</div>
							<i id="{{cans._id}}down" class="far fa-thumbs-down TD" onclick="vote('down', this)"></i>           



                            	<div class="row">
								<div class="col thumbup">
									<i id="{{cans._id}}up" class="fas fa-thumbs-up TU" onclick="vote('up', this)"></i>
								</div>
								<div class="col ratings-cards ratings-number">{{cans.average}}</div>
								<div class="col thumbsdown">
									<i id="{{cans._id}}down" class="far fa-thumbs-down TD" onclick="vote('down', this)"></i>
								</div>
							</div>
							{% elif cans.rating == 0 %}
							<div class="row">
								<div class="col thumbup">
									<i id="{{cans._id}}up" class="far fa-thumbs-up TU" onclick="vote('up', this)"></i>
								</div>
								<div class="col ">
									<div class="ratings-cards ratings-number">{{cans.average}}</div>
								</div>
								<div class="col thumbsdown">
									<i id="{{cans._id}}down" class="fas fa-thumbs-down TD" onclick="vote('down', this)"></i>
								</div>
							</div>
							{% else %}
							<div class="row">
								<div class="col thumbup">
									<i id="{{cans._id}}up" class="far fa-thumbs-up TU" onclick="vote('up', this)"></i>
								</div>
								<div class="col">
									<div class="ratings-cards ratings-number">{{cans.average}}</div>
								</div>
								<div class="col thumbsdown">
									<i id="{{cans._id}}down" class="far fa-thumbs-down TD" onclick="vote('down', this)"></i>
								</div>
							</div>         